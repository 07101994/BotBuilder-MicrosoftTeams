// <auto-generated /> Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Bot.Connector.Teams
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for TeamsOperations.
    /// </summary>
    public static partial class TeamsOperationsExtensions
    {
            /// <summary>
            /// Fetches channel list for a given team
            /// </summary>
            /// <remarks>
            /// Fetch the channel list.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamsId'>
            /// Team Id
            /// </param>
            public static ConversationList FetchChannelList(this ITeamsOperations operations, string teamsId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITeamsOperations)s).FetchChannelListAsync(teamsId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Fetches channel list for a given team
            /// </summary>
            /// <remarks>
            /// Fetch the channel list.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamsId'>
            /// Team Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ConversationList> FetchChannelListAsync(this ITeamsOperations operations, string teamsId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.FetchChannelListWithHttpMessagesAsync(teamsId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Fetches details related to a team
            /// </summary>
            /// <remarks>
            /// Fetch details for a team
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamsId'>
            /// Team Id
            /// </param>
            public static TeamDetails FetchTeamDetails(this ITeamsOperations operations, string teamsId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITeamsOperations)s).FetchTeamDetailsAsync(teamsId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Fetches details related to a team
            /// </summary>
            /// <remarks>
            /// Fetch details for a team
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamsId'>
            /// Team Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TeamDetails> FetchTeamDetailsAsync(this ITeamsOperations operations, string teamsId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.FetchTeamDetailsWithHttpMessagesAsync(teamsId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
